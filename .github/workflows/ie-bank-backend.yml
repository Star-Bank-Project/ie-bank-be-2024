name: ie-bank-backend

on:
  push: # Trigger on any branch push
    branches:
      - '**'  # Matches all branches
  pull_request: # Trigger on any pull request
    branches: ['*'] # Matches all branches
    types: ['opened', 'synchronize', 'reopened', 'closed', 'edited']
  workflow_dispatch: # Allow manual triggering of workflow

permissions:
  contents: read
  id-token: write

env:
  ENV: ghci  # Set environment to GitHub CI
  # Define dummy values for testing
  DBUSER: test_user
  DBPASS: test_password
  DBHOST: localhost
  DBNAME: test_db
  SQLALCHEMY_DATABASE_URI: sqlite:///test.db  # Use SQLite for testing in GitHub Actions

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11  # Specify the Python version to use

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python -m pytest --cov=iebank_api -v

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov

  build-docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Docker Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Build and push image
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest

  deploy-dev:
    if: always()
    runs-on: ubuntu-latest
    needs: build-docker
    environment:
      name: 'Development'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - Dev
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ needs.build-docker.outputs.image-version }}

  deploy-uat:
    if: always()
    runs-on: ubuntu-latest
    needs: build-docker
    environment:
      name: 'UAT'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Docker Registry (UAT)
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Deploy to Azure Web App - UAT
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME_UAT }}:${{ needs.build-docker.outputs.image-version }}
